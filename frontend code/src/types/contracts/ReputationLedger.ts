/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReputationLedger {
  export type RentRecordStruct = { amount: BigNumberish; date: BigNumberish };

  export type RentRecordStructOutput = [amount: bigint, date: bigint] & {
    amount: bigint;
    date: bigint;
  };
}

export interface ReputationLedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAverageRating"
      | "getRentHistory"
      | "recordRentPayment"
      | "rentHistory"
      | "reviewsGiven"
      | "reviewsReceived"
      | "submitReview"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RentRecorded" | "ReviewSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAverageRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRentPayment",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewsGiven",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewsReceived",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReview",
    values: [AddressLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAverageRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRentPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewsGiven",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewsReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReview",
    data: BytesLike
  ): Result;
}

export namespace RentRecordedEvent {
  export type InputTuple = [
    tenant: AddressLike,
    amount: BigNumberish,
    date: BigNumberish
  ];
  export type OutputTuple = [tenant: string, amount: bigint, date: bigint];
  export interface OutputObject {
    tenant: string;
    amount: bigint;
    date: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewSubmittedEvent {
  export type InputTuple = [
    reviewer: AddressLike,
    reviewee: AddressLike,
    rating: BigNumberish
  ];
  export type OutputTuple = [
    reviewer: string,
    reviewee: string,
    rating: bigint
  ];
  export interface OutputObject {
    reviewer: string;
    reviewee: string;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationLedger extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationLedger;
  waitForDeployment(): Promise<this>;

  interface: ReputationLedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAverageRating: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getRentHistory: TypedContractMethod<
    [tenant: AddressLike],
    [ReputationLedger.RentRecordStructOutput[]],
    "view"
  >;

  recordRentPayment: TypedContractMethod<
    [tenant: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rentHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { amount: bigint; date: bigint }],
    "view"
  >;

  reviewsGiven: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, bigint] & {
        reviewer: string;
        reviewee: string;
        rating: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  reviewsReceived: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, bigint] & {
        reviewer: string;
        reviewee: string;
        rating: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  submitReview: TypedContractMethod<
    [reviewee: AddressLike, rating: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAverageRating"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRentHistory"
  ): TypedContractMethod<
    [tenant: AddressLike],
    [ReputationLedger.RentRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordRentPayment"
  ): TypedContractMethod<
    [tenant: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rentHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { amount: bigint; date: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "reviewsGiven"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, bigint] & {
        reviewer: string;
        reviewee: string;
        rating: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reviewsReceived"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, bigint] & {
        reviewer: string;
        reviewee: string;
        rating: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitReview"
  ): TypedContractMethod<
    [reviewee: AddressLike, rating: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RentRecorded"
  ): TypedContractEvent<
    RentRecordedEvent.InputTuple,
    RentRecordedEvent.OutputTuple,
    RentRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewSubmitted"
  ): TypedContractEvent<
    ReviewSubmittedEvent.InputTuple,
    ReviewSubmittedEvent.OutputTuple,
    ReviewSubmittedEvent.OutputObject
  >;

  filters: {
    "RentRecorded(address,uint256,uint256)": TypedContractEvent<
      RentRecordedEvent.InputTuple,
      RentRecordedEvent.OutputTuple,
      RentRecordedEvent.OutputObject
    >;
    RentRecorded: TypedContractEvent<
      RentRecordedEvent.InputTuple,
      RentRecordedEvent.OutputTuple,
      RentRecordedEvent.OutputObject
    >;

    "ReviewSubmitted(address,address,uint8)": TypedContractEvent<
      ReviewSubmittedEvent.InputTuple,
      ReviewSubmittedEvent.OutputTuple,
      ReviewSubmittedEvent.OutputObject
    >;
    ReviewSubmitted: TypedContractEvent<
      ReviewSubmittedEvent.InputTuple,
      ReviewSubmittedEvent.OutputTuple,
      ReviewSubmittedEvent.OutputObject
    >;
  };
}
