/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RentalAgreementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dueDate"
      | "endDate"
      | "isActive"
      | "landlord"
      | "payRent"
      | "propertyAddress"
      | "rentAmount"
      | "reputationLedger"
      | "rules"
      | "securityDeposit"
      | "startDate"
      | "tenant"
      | "terminateAgreement"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AgreementTerminated" | "RentPaid"
  ): EventFragment;

  encodeFunctionData(functionFragment: "dueDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "landlord", values?: undefined): string;
  encodeFunctionData(functionFragment: "payRent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propertyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationLedger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rules", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "securityDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "tenant", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "dueDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "landlord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reputationLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "securityDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tenant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
}

export namespace AgreementTerminatedEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentPaidEvent {
  export type InputTuple = [tenant: AddressLike, amount: BigNumberish];
  export type OutputTuple = [tenant: string, amount: bigint];
  export interface OutputObject {
    tenant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RentalAgreement extends BaseContract {
  connect(runner?: ContractRunner | null): RentalAgreement;
  waitForDeployment(): Promise<this>;

  interface: RentalAgreementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dueDate: TypedContractMethod<[], [bigint], "view">;

  endDate: TypedContractMethod<[], [bigint], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  landlord: TypedContractMethod<[], [string], "view">;

  payRent: TypedContractMethod<[], [void], "payable">;

  propertyAddress: TypedContractMethod<[], [string], "view">;

  rentAmount: TypedContractMethod<[], [bigint], "view">;

  reputationLedger: TypedContractMethod<[], [string], "view">;

  rules: TypedContractMethod<[], [string], "view">;

  securityDeposit: TypedContractMethod<[], [bigint], "view">;

  startDate: TypedContractMethod<[], [bigint], "view">;

  tenant: TypedContractMethod<[], [string], "view">;

  terminateAgreement: TypedContractMethod<
    [reason: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dueDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "landlord"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payRent"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "propertyAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rentAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reputationLedger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rules"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "securityDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tenant"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "terminateAgreement"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;

  getEvent(
    key: "AgreementTerminated"
  ): TypedContractEvent<
    AgreementTerminatedEvent.InputTuple,
    AgreementTerminatedEvent.OutputTuple,
    AgreementTerminatedEvent.OutputObject
  >;
  getEvent(
    key: "RentPaid"
  ): TypedContractEvent<
    RentPaidEvent.InputTuple,
    RentPaidEvent.OutputTuple,
    RentPaidEvent.OutputObject
  >;

  filters: {
    "AgreementTerminated(string)": TypedContractEvent<
      AgreementTerminatedEvent.InputTuple,
      AgreementTerminatedEvent.OutputTuple,
      AgreementTerminatedEvent.OutputObject
    >;
    AgreementTerminated: TypedContractEvent<
      AgreementTerminatedEvent.InputTuple,
      AgreementTerminatedEvent.OutputTuple,
      AgreementTerminatedEvent.OutputObject
    >;

    "RentPaid(address,uint256)": TypedContractEvent<
      RentPaidEvent.InputTuple,
      RentPaidEvent.OutputTuple,
      RentPaidEvent.OutputObject
    >;
    RentPaid: TypedContractEvent<
      RentPaidEvent.InputTuple,
      RentPaidEvent.OutputTuple,
      RentPaidEvent.OutputObject
    >;
  };
}
